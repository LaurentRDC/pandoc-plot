# This Appveyor configuration file is modified from Stack's documentation
#   https://github.com/commercialhaskell/stack/blob/stable/doc/appveyor.yml
#
# A discussion is available here:
#   https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci
#
build: off

cache: 
  - "C:\\sr"


# Skipping commits affecting specific files (GitHub only).
# More details here: /docs/appveyor-yml
skip_commits:
  files:
    - examples/*
    - '*.md'
    - azure-pipelines.yml
    - .azure/*

clone_folder: "c:\\stack"

environment:
  global:
    STACK_ROOT: "c:\\sr"

    # Override the temp directory to avoid sed escaping issues
    # See https://github.com/haskell/cabal/issues/5386
    TMP: "c:\\tmp"

    MINICONDA: "C:\\Miniconda3-x64"

  matrix:
  - ARGS: "--stack-yaml stack.yaml --system-ghc"

matrix:
  fast_finish: true

before_test:
# http://help.appveyor.com/discussions/problems/6312-curl-command-not-found
- set PATH=C:\Program Files\Git\mingw64\bin;%PATH%

- curl -sS -ostack.zip -L --insecure https://get.haskellstack.org/stable/windows-x86_64.zip
- 7z x stack.zip stack.exe

# Installing GHC 8.10.1 to bypass problems regarding GHC 8.8.3 on Windows
# We have --system-ghc in the ARGS to make sure we use this GHC
- choco install --yes ghc --version 8.10.1

# Install GNU Octave
- choco install --yes octave

# Install gnuplot
- choco install --yes gnuplot

# Refresh environment to be able to use the choco-installed binaries
# This must be done before conda is added to path
- refreshenv

# Miniconda is preinstalled on Appveyor images
# https://www.appveyor.com/docs/windows-images-software/#python
- "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
- conda update --yes -n base -c defaults conda
- conda create --yes -n testenv python=3.7
- activate testenv

# Pillow is required to save images to jpg
- conda install --yes matplotlib pillow

# Plotly installation instructions are more complex because we export static images
# https://plot.ly/python/static-image-export/
- conda install --yes -c plotly plotly-orca psutil requests
- conda install --yes plotly
test_script:

# Install toolchain, but do it silently due to lots of output
# - stack %ARGS% setup > nul

# The ugly echo "" hack is to avoid complaints about 0 being an invalid file
# descriptor
- echo "" | stack %ARGS% --no-terminal test --fast

# Integration tests
# We install pandoc with conda because it is prebuilt
- conda install --yes -c conda-forge pandoc
- stack install --local-bin-path .
- pandoc --filter pandoc-plot -i tests/integration.md -t html
- pandoc-plot clean tests/integration.md
