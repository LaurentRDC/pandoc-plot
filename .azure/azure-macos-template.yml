jobs:
    - job: ${{ parameters.name }}
      timeoutInMinutes: 120
      pool:
        vmImage: ${{ parameters.vmImage }}
      strategy:
        matrix:
          stable:
            ARGS: "--stack-yaml stack.yaml"
        maxParallel: 6
      variables:
        STACK_ROOT: $(Build.SourcesDirectory)/.stack
    
      steps:
      # Caching steps are inspired from haskell-ide-engine
      # https://github.com/haskell/haskell-ide-engine/blob/master/.azure/windows-stack.yml
      - task: Cache@2
        inputs:
          key: 'stack | "$(Agent.OS)" | "$(Build.SourcesDirectory)/stack.yaml" | v2'
          path: .azure-cache
          cacheHitVar: CACHE_RESTORED
        displayName: "Cache stack-root"
    
      - bash: |
          mkdir -p $STACK_ROOT
          tar -vxzf .azure-cache/stack-root.tar.gz -C /
          mkdir -p .stack-work
          tar -vxzf .azure-cache/stack-work.tar.gz
        displayName: "Unpack cache"
        condition: eq(variables.CACHE_RESTORED, 'true')
    
      - bash: |
          mkdir -p ~/.local/bin
          curl -skL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | \
            tar vxz --strip-components=1 --include '*/stack' -C ~/.local/bin;
        displayName: Install stack
    
      - bash: |
          export PATH=$HOME/.local/bin:$PATH
          stack setup $ARGS
        displayName: Install GHC
    
      - bash: |
          export PATH=$HOME/.local/bin:$PATH
          stack build $ARGS --only-dependencies
        displayName: Build dependencies
    
      - bash: |
          export PATH=$HOME/.local/bin:$PATH
          stack build $ARGS
        displayName: Build `pandoc-plot`
    
      - bash: |
          export PATH=$HOME/.local/bin:$PATH
          mkdir .azure-deploy
          stack install $ARGS --local-bin-path .azure-deploy
          cd .azure-deploy
          echo "pandoc-plot version: $(pandoc-plot --version)"
          ARTIFACT_NAME=pandoc-plot-macos-x86_64
          tar -vczf $(Build.ArtifactStagingDirectory)/$ARTIFACT_NAME.tar.xz *
        displayName: Install `pandoc-plot`
    
      - bash: |
          export PATH=$HOME/.local/bin:$PATH
          stack build $ARGS --test --bench --only-dependencies
        displayName: Build Test-dependencies
    
        # Note that the task to add conda to PATH must be done
        # in its own step for `source activate ...` command to work.
        # I suspect that the environment variable need to be
        # updated/refreshed, which is done at the beginning of a
        # step
      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to PATH.

        # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
        # We need to take ownership if we want to update conda or install packages globally
      - bash: sudo chown -R $USER $CONDA
        displayName: Take ownership of conda installation
        
      - bash: |
          conda create --quiet --yes --name testenv python=3.7
        displayName: Create Python test environment
          
        # Note that Pillow is required to save images to jpg
        # Plotly installation instructions are more complex because we export static images
        # https://plot.ly/python/static-image-export/
      - bash: |
          source activate testenv
          conda install --quiet --yes matplotlib pillow
        displayName: Install Matplotlib toolkit
  
      - bash: |
          source activate testenv
          conda install --quiet --yes -c plotly plotly-orca psutil requests
          conda install --quiet --yes plotly
        displayName: Install Plotly/Python toolkit
    
      - bash: |
          export PATH=$HOME/.local/bin:$PATH
          source activate testenv
          stack test $ARGS
        displayName: "Unit tests"

      # - bash: |
      #     stack install pandoc
      #     stack install
      #     source activate testenv
      #     pandoc --filter pandoc-plot -i tests/integration.md -t html
      #     pandoc-plot clean tests/integration.md
      #   displayName: "Integration tests"
    
      - publish: $(Build.ArtifactStagingDirectory)/pandoc-plot-macos-x86_64.tar.xz
        artifact: pandoc-plot-macos-x86_64.tar.xz
  
      - bash: |
          mkdir -p .azure-cache
          tar -vczf .azure-cache/stack-root.tar.gz $STACK_ROOT
          tar -vczf .azure-cache/stack-work.tar.gz .stack-work
        displayName: "Pack cache"
    