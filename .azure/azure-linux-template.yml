jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: 120
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
      matrix:
        stable:
          ARGS: "--stack-yaml stack.yaml"
      maxParallel: 6
    variables:
      STACK_ROOT: /home/vsts/.stack
  
    steps:
    # Caching steps are inspired from haskell-ide-engine
    # https://github.com/haskell/haskell-ide-engine/blob/master/.azure/windows-stack.yml
    - task: Cache@2
      inputs:
        key: '"stack" | "$(Agent.OS)" | $(Build.SourcesDirectory)/stack.yaml'
        path: .azure-cache
        cacheHitVar: CACHE_RESTORED
      displayName: "Cache stack-root"
  
    - bash: |
        mkdir -p $STACK_ROOT
        tar -vxzf .azure-cache/stack-root.tar.gz -C /c
        mkdir -p .stack-work
        tar -vxzf .azure-cache/stack-work.tar.gz
      displayName: "Unpack cache"
      condition: eq(variables.CACHE_RESTORED, 'true')
  
    - bash: |
        mkdir -p ~/.local/bin
        curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | \
          tar vxz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      displayName: Install stack
  
    - bash: |
        stack setup $ARGS
      displayName: Install GHC
  
    - bash: |
        stack build $ARGS --only-dependencies
      displayName: Build dependencies
  
    - bash: |
        stack build $ARGS
      displayName: Build `pandoc-plot`
  
    - bash: |
        mkdir .azure-deploy
        stack install $ARGS --local-bin-path .azure-deploy
        cd .azure-deploy
        ARTIFACT_NAME=pandoc-plot-$(pandoc-plot --version)-linux-x86_64
        7z a "$(Build.ArtifactStagingDirectory)/$ARTIFACT_NAME.zip" *
      displayName: Install `pandoc-plot`
  
    - bash: |
        stack build $ARGS --test --bench --only-dependencies
      displayName: Build Test-dependencies
  
      # Note that the task to add conda to PATH must be done
      # in its own step for `source activate ...` command to work.
      # I suspect that the environment variable need to be
      # updated/refreshed, which is done at the beginning of a
      # step
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH.
      
    - bash: |
        # Create anaconda environment
        conda create --quiet --yes --name testenv python=3.7
  
        source activate testenv
  
        # Pillow is required to save images to jpg
        conda install --quiet --yes matplotlib pillow
  
        # Plotly installation instructions are more complex because we export static images
        # https://plot.ly/python/static-image-export/
        conda install --quiet --yes -c plotly plotly-orca psutil requests
        conda install --quiet --yes plotly
  
        conda list
      displayName: Install Matplotlib & Plotly/Python toolkits
  
    - bash: |
        sudo apt-get --quiet --yes install octave
      displayName: Install GNU Octave toolkit
  
    - bash: |
        sudo apt-get --quiet --yes install r-cran-littler
      displayName: Install R toolchain
  
    - bash: |
        sudo Rscript -e "install.packages('ggplot2', repos='http://cran.rstudio.com/')"
      displayName: Install ggplot2
  
    - bash: |
        sudo apt-get --quiet --yes install gnuplot
      displayName: Install gnuplot
  
    - bash: |
        source activate testenv
        stack test $ARGS
      displayName: "Unit tests"
        
  
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: pandoc-plot-$(Agent.OS)
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues')
    - bash: |
        mkdir -p .azure-cache
        tar -vczf .azure-cache/stack-root.tar.gz $STACK_ROOT
        tar -vczf .azure-cache/stack-work.tar.gz .stack-work
      displayName: "Pack cache"
  