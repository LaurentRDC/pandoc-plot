{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}

{-|
Module      : $header$
Copyright   : (c) Laurent P Ren√© de Cotret, 2019
License     : MIT
Maintainer  : laurent.decotret@outlook.com
Stability   : internal
Portability : portable

This module defines types and functions that help
with keeping track of figure specifications
-}
module Text.Pandoc.Filter.Plot.Parse ( 
    parseFigureSpec 
) where

import           Control.Monad                   (join)
import           Control.Monad.IO.Class          (liftIO)
import           Control.Monad.Reader            (ask)

import           Data.Default.Class              (def)
import           Data.Hashable                   (hash)
import           Data.List                       (intersperse)
import qualified Data.Map.Strict                 as Map
import           Data.Maybe                      (fromMaybe, listToMaybe)
import           Data.Monoid                     ((<>))
import qualified Data.Text                       as T
import qualified Data.Text.IO                    as T
import           Data.Version                    (showVersion)

import           Paths_pandoc_plot             (version)

import           System.FilePath                 (FilePath, addExtension,
                                                  makeValid, normalise,
                                                  replaceExtension, (</>))

import           Text.Pandoc.Builder             (fromList, imageWith, link,
                                                  para, toList)
import           Text.Pandoc.Definition          (Block (..), Inline,
                                                  Pandoc (..), Attr)
import           Text.Shakespeare.Text           (st)

import           Text.Pandoc.Class               (runPure)
import           Text.Pandoc.Extensions          (Extension (..),
                                                  extensionsFromList)
import           Text.Pandoc.Options             (ReaderOptions (..))
import           Text.Pandoc.Readers             (readMarkdown)

import           Text.Pandoc.Filter.Plot.Types
import           Text.Pandoc.Filter.Plot.Renderers


-- | Keys that pandoc-plot will look for in code blocks. These are only exported for testing purposes.
directoryKey, captionKey, dpiKey, includePathKey, saveFormatKey, withLinksKey :: String
directoryKey     = "directory"
captionKey       = "caption"
dpiKey           = "dpi"
includePathKey   = "include"
saveFormatKey    = "format"
withLinksKey     = "links"


-- | list of all keys related to pandoc-plot that
-- can be specified in source material.
inclusionKeys :: [String]
inclusionKeys = [ directoryKey
                , captionKey
                , dpiKey
                , includePathKey
                , saveFormatKey
                , withLinksKey
                ]

renderer :: Attr -> Maybe Renderer
renderer attrs = listToMaybe $ filter (\r -> rendererName r `elem` attrs) attrs
    


-- | Determine inclusion specifications from @Block@ attributes.
parseFigureSpec :: Block -> PlotM (Maybe FigureSpec)
parseFigureSpec (CodeBlock (id', cls, attrs) content) = figureSpec <$> (renderer cls)
    where
        attrs'        = Map.fromList attrs
        filteredAttrs = filter (\(k, _) -> k `notElem` inclusionKeys) attrs
        includePath   = Map.lookup includePathKey attrs'
        header        = "# Generated by pandoc-plot " <> ((T.pack . showVersion) version)

        figureSpec :: Renderer -> PlotM FigureSpec
        figureSpec lib = do
            config <- ask
            includeScript <- fromMaybe
                                (return $ defaultIncludeScript config)
                                ((liftIO . T.readFile) <$> includePath)
            return $
                FigureSpec
                    { caption      = Map.findWithDefault mempty captionKey attrs'
                    , withLinks    = fromMaybe (defaultWithLinks config) $ readBool <$> Map.lookup withLinksKey attrs'
                    , script       = mconcat $ intersperse "\n" [header, includeScript, T.pack content]
                    , saveFormat   = fromMaybe (defaultSaveFormat config) $ join $ saveFormatFromString <$> Map.lookup saveFormatKey attrs'
                    , directory    = makeValid $ Map.findWithDefault (defaultDirectory config) directoryKey attrs'
                    , dpi          = fromMaybe (defaultDPI config) $ read <$> Map.lookup dpiKey attrs'
                    , renderer     = lib
                    , blockAttrs   = (id', filter (\c -> c `notElem` ["pyplot", "plotly"]) cls, filteredAttrs)
                    }

parseFigureSpec _ = return Nothing

-- | Reader options for captions.
readerOptions :: ReaderOptions
readerOptions = def
    {readerExtensions =
        extensionsFromList
            [ Ext_tex_math_dollars
            , Ext_superscript
            , Ext_subscript
            , Ext_raw_tex
            ]
    }


-- | Read a figure caption in Markdown format. LaTeX math @$...$@ is supported,
-- as are Markdown subscripts and superscripts.
captionReader :: String -> Maybe [Inline]
captionReader t = either (const Nothing) (Just . extractFromBlocks) $ runPure $ readMarkdown' (T.pack t)
    where
        readMarkdown' = readMarkdown readerOptions

        extractFromBlocks (Pandoc _ blocks) = mconcat $ extractInlines <$> blocks

        extractInlines (Plain inlines)          = inlines
        extractInlines (Para inlines)           = inlines
        extractInlines (LineBlock multiinlines) = join multiinlines
        extractInlines _                        = []


-- | Flexible boolean parsing
readBool :: String -> Bool
readBool s | s `elem` ["True",  "true",  "'True'",  "'true'",  "1"] = True
           | s `elem` ["False", "false", "'False'", "'false'", "0"] = False
           | otherwise = error $ mconcat ["Could not parse '", s, "' into a boolean. Please use 'True' or 'False'"]
