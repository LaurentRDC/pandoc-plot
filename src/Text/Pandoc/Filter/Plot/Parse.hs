{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}

{-|
Module      : $header$
Copyright   : (c) Laurent P Ren√© de Cotret, 2019
License     : GNU GPL, version 2 or above
Maintainer  : laurent.decotret@outlook.com
Stability   : internal
Portability : portable

This module defines types and functions that help
with keeping track of figure specifications
-}
module Text.Pandoc.Filter.Plot.Parse ( 
      parseFigureSpec 
    , captionReader
) where

import           Control.Monad                   (join)
import           Control.Monad.IO.Class          (liftIO)
import           Control.Monad.Reader            (ask)

import           Data.Default.Class              (def)
import           Data.Hashable                   (hash)
import           Data.List                       (intersperse)
import qualified Data.Map.Strict                 as Map
import           Data.Maybe                      (fromMaybe, listToMaybe)
import           Data.Monoid                     ((<>))
import           Data.String                     (fromString)
import           Data.Text                       (Text, pack, unpack)
import qualified Data.Text.IO                    as TIO
import           Data.Version                    (showVersion)

import           Paths_pandoc_plot               (version)

import           System.FilePath                 (FilePath, addExtension,
                                                    makeValid, normalise,
                                                    replaceExtension, (</>))

import           Text.Pandoc.Builder             (fromList, imageWith, link,
                                                    para, toList)
import           Text.Pandoc.Definition          (Block (..), Inline,
                                                    Pandoc (..))
import           Text.Shakespeare.Text           (st)

import           Text.Pandoc.Class               (runPure)
import           Text.Pandoc.Extensions          (Extension (..),
                                                    extensionsFromList)
import           Text.Pandoc.Options             (ReaderOptions (..))
import           Text.Pandoc.Readers             (readMarkdown)

import           Text.Pandoc.Filter.Plot.Types
import           Text.Pandoc.Filter.Plot.Renderers
import           Text.Pandoc.Filter.Plot.Configuration

-- | Determine inclusion specifications from @Block@ attributes.
-- Note that the @".pyplot"@ OR @.plotly@ class is required, but all other
-- parameters are optional.
parseFigureSpec :: Block -> PlotM (Maybe FigureSpec)
parseFigureSpec (CodeBlock (id', cls, attrs) content) = do
    let renderer = listToMaybe $ filter (\r -> rendererName r `elem` cls) renderers
    case renderer of
        Nothing -> return Nothing
        Just r -> do
            spec <- figureSpec r
            return (Just spec)
    where
        renderer      = listToMaybe $ filter (\r -> rendererName r `elem` cls) renderers
        attrs'        = Map.fromList attrs
        filteredAttrs = filter (\(k, _) -> k `notElem` inclusionKeys) attrs
        includePath   = unpack <$> Map.lookup includePathKey attrs'
        header        = "# Generated by pandoc-plot " <> ((pack . showVersion) version)

        figureSpec :: Renderer -> PlotM FigureSpec
        figureSpec renderer = do
            config <- ask
            let includeScript = mempty -- TODO: this
            return $
                FigureSpec
                    { caption        = Map.findWithDefault mempty captionKey attrs'
                    , withLinks      = fromMaybe (defaultWithLinks config) $ readBool <$> Map.lookup withLinksKey attrs'
                    , script         = mconcat $ intersperse "\n" [header, includeScript, content]
                    , saveFormat     = fromMaybe (defaultSaveFormat config) $ (fromString . unpack) <$> Map.lookup saveFormatKey attrs'
                    , directory      = makeValid $ unpack $ Map.findWithDefault (pack $ defaultDirectory config) directoryKey attrs'
                    , dpi            = fromMaybe (defaultDPI config) $ (read . unpack) <$> Map.lookup dpiKey attrs'
                    , figureRenderer = renderer
                    , extraAttrs     = mempty -- TODO: parse this
                    , blockAttrs     = (id', filter (\c -> c `notElem` (rendererName <$> renderers)) cls, filteredAttrs)
                    }

parseFigureSpec _ = return Nothing

-- | Reader options for captions.
readerOptions :: ReaderOptions
readerOptions = def
    {readerExtensions =
        extensionsFromList
            [ Ext_tex_math_dollars
            , Ext_superscript
            , Ext_subscript
            , Ext_raw_tex
            ]
    }


-- | Read a figure caption in Markdown format. LaTeX math @$...$@ is supported,
-- as are Markdown subscripts and superscripts.
captionReader :: Text -> Maybe [Inline]
captionReader t = either (const Nothing) (Just . extractFromBlocks) $ runPure $ readMarkdown' t
    where
        readMarkdown' = readMarkdown readerOptions

        extractFromBlocks (Pandoc _ blocks) = mconcat $ extractInlines <$> blocks

        extractInlines (Plain inlines)          = inlines
        extractInlines (Para inlines)           = inlines
        extractInlines (LineBlock multiinlines) = join multiinlines
        extractInlines _                        = []


-- | Flexible boolean parsing
readBool :: Text -> Bool
readBool s | s `elem` ["True",  "true",  "'True'",  "'true'",  "1"] = True
           | s `elem` ["False", "false", "'False'", "'false'", "0"] = False
           | otherwise = error $ unpack $ mconcat ["Could not parse '", s, "' into a boolean. Please use 'True' or 'False'"]
