name: CI

on:
  push:
  pull_request:

jobs:
  build-and-test:
    if: contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[skip ci]') == false

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "windows-latest"
            stack_global_opts: "--system-ghc"
          - os: "ubuntu-latest"
            stack_global_opts: ""
          - os: "macos-latest"
            stack_global_opts: ""

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - uses: r-lib/actions/setup-r@v1

    - uses: actions/cache@v2
      name: Cache Haskell build artifacts [Linux]
      if: matrix.os == 'ubuntu-latest'
      with:
        path: ~/.stack
        key: ${{ runner.os }}-${{ hashFiles('stack.*') }}
    
    - uses: actions/cache@v2
      name: Cache Haskell build artifacts [Windows]
      if: matrix.os == 'windows-latest'
      with:
        path: |
          C:\Users\runneradmin\AppData\Roaming\stack\
        key: ${{ runner.os }}-appdata-roaming-stack-${{ hashFiles('stack.yaml') }}

    - uses: actions/cache@v2
      name: Cache Python build artifacts
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ hashFiles('.github/workflows/requirements.txt') }}

    - name: Build pandoc-plot
      run: |
        stack ${{ matrix.stack_global_opts }} upgrade
        stack ${{ matrix.stack_global_opts }} update
        stack ${{ matrix.stack_global_opts }} install --ghc-options="-v3" network
        stack ${{ matrix.stack_global_opts }} install --ghc-options="-v3"

    - name: Install Python toolkits
      run: |
        python -m pip install --upgrade pip
        pip install numpy wheel
        pip install -r .github/workflows/requirements.txt
    
    - name: Set up MATLAB [Linux]
      if: matrix.os == 'ubuntu-latest'
      uses: matlab-actions/setup-matlab@v1
    
    - name: Install Plots.jl toolkit
      shell: julia {0}
      run: |
        using Pkg
        Pkg.add("Plots")

    - name: Install GGPlot2
      run: |
        Rscript -e "install.packages('ggplot2', repos='http://cran.rstudio.com/')"

    - name: Install Octave, Gnuplot, Graphviz, and PlantUML [Linux]
      if: runner.os == 'Linux'
      run: |
        sudo apt-get --quiet --yes install octave
        sudo apt-get --quiet --yes install gnuplot
        sudo apt-get --quiet --yes install graphviz

        sudo apt-get --quiet --yes install plantuml
        sudo mv /usr/share/plantuml/plantuml.jar .
        java -jar plantuml.jar -h

    - name: Install Graphviz and GNUplot [Windows]
      if: runner.os == 'Windows'
      shell: pwsh
      run: |        
        choco install --yes --no-progress graphviz
        dot -c

        choco install --yes --no-progress gnuplot
    
    - name: Build dependencies
      run: stack ${{ matrix.stack_global_opts }} build --test --no-run-tests

    - name: Check installed plotting toolkits
      run: stack ${{ matrix.stack_global_opts }} exec -- pandoc-plot toolkits

    - name: Unit tests
      run: stack ${{ matrix.stack_global_opts }} test
    
    - name: Integration tests
      shell: bash
      run: |
        stack ${{ matrix.stack_global_opts }} install pandoc
        stack ${{ matrix.stack_global_opts }} install
        
        stack ${{ matrix.stack_global_opts }} exec -- pandoc --filter pandoc-plot -i tests/integration.md -t html
        if [ $(ls "plots" | wc -l) == 0 ]; then
          exit 1
        fi
        stack ${{ matrix.stack_global_opts }} exec -- pandoc-plot clean tests/integration.md

        stack ${{ matrix.stack_global_opts }} exec -- pandoc --filter pandoc-plot -i tests/issue16.md -t native
        if [ $(ls "plots" | wc -l) == 0 ]; then
          exit 1
        fi
        stack ${{ matrix.stack_global_opts }} exec -- pandoc-plot clean tests/issue16.md
    
    - name: Build documentation
      shell: pwsh
      run: .\tools\mkmanual.ps1 -stackopts "${{ matrix.stack_global_opts }}"

    - name: Build artifact
      shell: bash
      run: |
        mkdir artifact
        stack ${{ matrix.stack_global_opts }} install --local-bin-path artifact

        if [[ "${{ runner.os }}" != "Windows" ]]
        then
          chmod u+x artifact/pandoc-plot
        fi
    
    - name: Build artifact [Linux - static]
      if: runner.os == 'Linux'
      run: |
        mkdir artifact-static
        stack ${{ matrix.stack_global_opts }} install --flag pandoc-plot:static --local-bin-path artifact-static
        chmod u+x artifact-static/pandoc-plot

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-artifact
        path: artifact/pandoc-plot*
        retention-days: 7

    - name: Upload artifact [Linux - static]
      uses: actions/upload-artifact@v2
      if: runner.os == 'Linux'
      with:
        name: ${{ runner.os }}-artifact-static
        path: artifact-static/pandoc-plot
        retention-days: 7

    - name: Build Installer [Windows]
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        stack ${{ matrix.stack_global_opts }} clean --full
        stack ${{ matrix.stack_global_opts }} install pandoc-plot --local-bin-path ".\installer"
        $version = .\installer\pandoc-plot.exe --version
        iscc /dAppVersion=$version ".\installer\pandoc-plot-setup.iss"

    - name: Upload artifact [Windows - installer]
      uses: actions/upload-artifact@v2
      if: runner.os == 'Windows'
      with:
        name: ${{ runner.os }}-artifact-installer
        path: installer/pandoc-plot-wininst-x86_64.exe
        retention-days: 7

  release:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
    
    - name: Compress artifacts and move to assets
      run: |
        mkdir assets
        zip -j assets/pandoc-plot-Windows-x86_64.zip Windows-artifact/pandoc-plot.exe
        mv Windows-artifact-installer/*.exe assets

        zip -j assets/pandoc-plot-Linux-x86_64.zip Linux-artifact/pandoc-plot
        zip -j assets/pandoc-plot-Linux-x86_64-static.zip Linux-artifact-static/pandoc-plot

        zip -j assets/pandoc-plot-macOS-x86_64.zip macOS-artifact/pandoc-plot

        ls -a assets

    - name: Create release description
      run: |
        python tools/release-description.py CHANGELOG.md > description.md
        cat description.md

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body_path: description.md
        files: |
          assets/*

  # winget-release:
  #   needs: [release]
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - uses: actions/download-artifact@v2

  #   - name: Update Winget package
  #     shell: pwsh
  #     env:
  #       SUBMIT: ${{ startsWith(github.ref, 'refs/tags/') }}
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: |
  #       $VERSION = .\Windows-artifact\pandoc-plot.exe --version

  #       iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
  #       .\wingetcreate.exe update `
  #         -i LaurentPRenedeCotret.pandoc-plot `
  #         --url https://github.com/LaurentRDC/pandoc-plot/releases/download/$VERSION/pandoc-plot-wininst-x86_64.exe `
  #         --version $VERSION `
  #         --token $GITHUB_TOKEN `
  #         --submit $SUBMIT